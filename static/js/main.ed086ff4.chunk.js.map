{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/ImageWithLoadingIndicator/ImageWithLoadingIndicator.js","Components/SelectCharacter/index.js","Components/Arena/index.js","assets/twitter-logo.svg","assets/Rilakkuma-Yosha.gif","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","criticalRate","LoadingIndicator","className","ImageWithLoadingIndicator","src","alt","useState","isLoading","setIsLoading","Loader","props","speed","width","height","viewBox","backgroundColor","foregroundColor","cx","cy","r","x","y","rx","ry","onLoad","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","alert","on","off","length","character","index","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","toastText","setToastText","characterHealthBoostLevels","setCharacterHealthBoostLevels","healthPricePerUnit","calculateHealthBoostLevels","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","popToast","text","setTimeout","runAttackAction","attackBoss","attackTxn","level1","parseInt","level2","level3","revivePlayerNFT","value","utils","parseEther","newPlayerHP","playerHP","boostPlayerNFTHealth","selection","healthRequested","price","purchaseHealth","toString","id","max","Fragment","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","rilakkuma_Yosha","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed086ff4.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = \"0x915844991f58937b59Ebf8aEd78618597072bDc0\"; //Rinkeby\n//const CONTRACT_ADDRESS = \"0x5Ef81F9583650B786D8F5cE05bc2c9d5E63BAb3c\"; //Ganache\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n    criticalRate: characterData.criticalRate.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport ContentLoader from \"react-content-loader\";\nimport \"./ImageWithLoadingIndicator.css\";\n\nconst ImageWithLoadingIndicator = ({ src, alt }) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const Loader = (props) => (\n    <ContentLoader\n      speed={2}\n      width={200}\n      height={350}\n      viewBox=\"0 0 200 350\"\n      backgroundColor=\"#626060\"\n      foregroundColor=\"#ecebeb\"\n      {...props}\n    >\n      <circle cx=\"63\" cy=\"51\" r=\"48\" />\n      <rect x=\"-2\" y=\"110\" rx=\"0\" ry=\"0\" width=\"131\" height=\"127\" />\n    </ContentLoader>\n  );\n\n  const handleOnLoadEvent = () => {\n    setIsLoading(false);\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader className=\"Loader\" />}\n      <img src={src} alt={alt} onLoad={handleOnLoadEvent} />\n    </div>\n  );\n};\nexport default ImageWithLoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport ImageWithLoadingIndicator from \"../ImageWithLoadingIndicator/ImageWithLoadingIndicator\";\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      setMintingCharacter(false);\n    }\n  };\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        /*\n         * Call contract to get all mint-able characters\n         */\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        /*\n         * Go through all of our characters and transform the data\n         */\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        /*\n         * Set all mint-able characters in state\n         */\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(\n          `Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`\n        );\n      }\n    };\n    /*\n     * If our gameContract is ready, let's get characters!\n     */\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <ImageWithLoadingIndicator\n          src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`}\n          alt={character.name}\n        />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport ImageWithLoadingIndicator from \"../ImageWithLoadingIndicator/ImageWithLoadingIndicator\";\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false);\n  const [toastText, setToastText] = useState(\"\");\n  const [characterHealthBoostLevels, setCharacterHealthBoostLevels] = useState(\n    []\n  );\n  // UseEffects\n  const healthPricePerUnit = 0.01;\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n    calculateHealthBoostLevels();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n     * Setup logic when this event is fired off\n     */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n      if (gameContract) {\n        gameContract.off(\"CriticalHit\");\n      }\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n      calculateHealthBoostLevels();\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  const popToast = (text) => {\n    setToastText(text);\n    setShowToast(true);\n    setTimeout(() => {\n      setShowToast(false);\n      setToastText(\"\");\n    }, 5000);\n  };\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n        gameContract.on(\"CriticalHit\", () => {\n          popToast(\"Critical hit 2x dmg!\");\n        });\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        popToast(`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`);\n        console.log(\"attackTxn:\", attackTxn);\n        setAttackState(\"hit\");\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n  const calculateHealthBoostLevels = () => {\n    //Calculate 25%\n    const level1 = parseInt((characterNFT.maxHp - characterNFT.hp) * 0.25);\n    const level2 = parseInt((characterNFT.maxHp - characterNFT.hp) * 0.5);\n    const level3 = parseInt(characterNFT.maxHp - characterNFT.hp);\n    console.log(\"Calculated health boost levels\", level1, level2, level3);\n    setCharacterHealthBoostLevels([level1, level2, level3]);\n  };\n\n  const revivePlayerNFT = async () => {\n    try {\n      if (gameContract) {\n        console.log(\"Attempt revive Character\");\n        await gameContract.revivePlayerNFT({\n          value: ethers.utils.parseEther(\".005\"),\n        });\n        gameContract.on(\"PlayerRevived\", (newPlayerHP) => {\n          console.log(\"Player revived\");\n          popToast(`${characterNFT.name} was revived! 🏨`);\n\n          setCharacterNFT((prevState) => {\n            let playerHP = newPlayerHP.toNumber();\n            return { ...prevState, hp: playerHP };\n          });\n\n          gameContract.off(\"PlayerRevived\");\n        });\n      }\n    } catch (error) {\n      console.error(\"Error reviving character\", error);\n    }\n  };\n\n  const boostPlayerNFTHealth = async (selection) => {\n    console.log(\"Health boost selected\");\n    try {\n      if (gameContract) {\n        const healthRequested = characterHealthBoostLevels[selection];\n        console.log(\"Attempt boost health by\", healthRequested);\n        let price = healthRequested * healthPricePerUnit;\n        await gameContract.purchaseHealth(healthRequested, {\n          value: ethers.utils.parseEther(price.toString()),\n        });\n        gameContract.on(\"HealthBoosted\", (newPlayerHP) => {\n          console.log(`Health boosted: ${newPlayerHP} hp`);\n          popToast(`Health boosted: ${newPlayerHP} hp 💊`);\n\n          setCharacterNFT((prevState) => {\n            let playerHP = newPlayerHP.toNumber();\n            return { ...prevState, hp: playerHP };\n          });\n          calculateHealthBoostLevels();\n          gameContract.off(\"HealthBoosted\");\n        });\n      }\n    } catch (error) {\n      console.error(\"Error boosting health\", error);\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {showToast && (\n        <div id=\"toast\" className=\"show\">\n          <div id=\"desc\">{toastText}</div>\n        </div>\n      )}\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <ImageWithLoadingIndicator\n                src={`https://cloudflare-ipfs.com/ipfs/${boss.imageURI}`}\n                alt={`Boss ${boss.name}`}\n              />\n              {/* <img\n                src={`https://cloudflare-ipfs.com/ipfs/${boss.imageURI}`}\n                alt={`Boss ${boss.name}`}\n              /> */}\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n            {attackState === \"attacking\" && (\n              <div className=\"loading-indicator\">\n                <LoadingIndicator />\n                <p>Attacking ⚔️</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Replace your Character UI with this */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <ImageWithLoadingIndicator\n                  src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                <h4>{`⚔️ Critical Hit Rate: ${characterNFT.criticalRate}`}</h4>\n              </div>\n            </div>\n            <div className=\"healthBoostButtonDiv\">\n              {characterNFT.hp === 0 && (\n                <button className=\"reviveButton\" onClick={revivePlayerNFT}>\n                  {`Revive Character: 0.005 Eth`}\n                </button>\n              )}\n              {characterNFT.hp < characterNFT.maxHp && characterNFT.hp !== 0 && (\n                <React.Fragment>\n                  <button\n                    className=\"healthBoostButton\"\n                    onClick={() => {\n                      boostPlayerNFTHealth(0);\n                    }}\n                  >\n                    {`Boost health 25%`}\n                    <br />\n                    {characterHealthBoostLevels[0] * healthPricePerUnit} {`eth`}\n                  </button>\n                  <button\n                    className=\"healthBoostButton\"\n                    onClick={() => {\n                      boostPlayerNFTHealth(1);\n                    }}\n                  >\n                    {`Boost health 50%`}\n                    <br />\n                    {characterHealthBoostLevels[1] * healthPricePerUnit} {`eth`}\n                  </button>\n                  <button\n                    className=\"healthBoostButton\"\n                    onClick={() => {\n                      boostPlayerNFTHealth(2);\n                    }}\n                  >\n                    {`Boost health to max %`}\n                    <br />\n                    {characterHealthBoostLevels[2] * healthPricePerUnit} {`eth`}\n                  </button>\n                </React.Fragment>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","export default __webpack_public_path__ + \"static/media/Rilakkuma-Yosha.4d8c0af0.gif\";","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport Arena from \"./Components/Arena\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport rilakkuma_Yosha from \"./assets/Rilakkuma-Yosha.gif\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      setIsLoading(false);\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    /*\n     * Scenario #1\n     */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img src={rilakkuma_Yosha} alt=\"リラックマよっしゃ！\" />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n       * Scenario #2\n       */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Heros of Animu</p>\n          <p className=\"sub-text\">ボッスを殺してしましょう</p>\n          {/* This is where our button and image code used to be!\n           *\tRemember we moved it into the render method.\n           */}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}